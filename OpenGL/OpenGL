
class CGLRenderer
{
public:
	CGLRenderer(void);
	virtual ~CGLRenderer(void);

	// promenljive

	double m_alpha = 0.0;
	double m_beta = 0.0;
	double m_dist = 20.0;

	UINT m_texEnv[6];
	UINT m_texSpider;

	// metode
	void DrawAxes();
	UINT LoadTexture(char* fileName);
	void DrawEnvCube(double a);
--------------------------------------
void CGLRenderer::DrawAxes()
{
	glLineWidth(2.0);

	glBegin(GL_LINES);

	glColor3d(0.0, 0.0, 1.0);
	glVertex3d(0.0, 0.0, 0.0);
	glVertex3d(50.0, 0.0, 0.0);

	glColor3d(1.0, 0.0, 0.0);
	glVertex3d(0.0, 0.0, 0.0);
	glVertex3d(0.0, 50.0, 0.0);

	glColor3d(0.0, 1.0, 0.0);
	glVertex3d(0.0, 0.0, 0.0);
	glVertex3d(0.0, 0.0, 50.0);

	glEnd();
}

void CGLRenderer::PrepareScene(CDC *pDC)
{
	wglMakeCurrent(pDC->m_hDC, m_hrc);
	
	glClearColor(1.0, 1.0, 1.0, 1.0);
	glEnable(GL_DEPTH_TEST);

	m_texEnv[0] = LoadTexture("assets/front.jpg");
	m_texEnv[1] = LoadTexture("assets/back.jpg");
	m_texEnv[2] = LoadTexture("assets/left.jpg");
	m_texEnv[3] = LoadTexture("assets/right.jpg");
	m_texEnv[4] = LoadTexture("assets/top.jpg");
	m_texEnv[5] = LoadTexture("assets/bot.jpg");

	m_texSpider = LoadTexture("assets/spider.png");

	wglMakeCurrent(NULL, NULL);
}

void CGLRenderer::DrawScene(CDC *pDC)
{
	wglMakeCurrent(pDC->m_hDC, m_hrc);
	
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();

	glTranslated(0.0, 0.0, -m_dist);
	glRotated(-m_alpha, 1.0, 0.0, 0.0);
	glRotated(-m_beta, 0.0, 1.0, 0.0);

	DrawAxes();

	//DrawSphere(5, 32, 0.25, 0.25, 0.24);
	//DrawCone(2, 5, 32, 0.75, 0.75, 0.25);

	DrawSpider();

	DrawEnvCube(100);

	glFlush();
	SwapBuffers(pDC->m_hDC);

	wglMakeCurrent(NULL, NULL);
}

UINT CGLRenderer::LoadTexture(char* fileName)
{
	UINT texID;
	DImage img;
	img.Load(CString(fileName));

	glPixelStorei(GL_UNPACK_ALIGNMENT, 4);
	glGenTextures(1, &texID);
	glBindTexture(GL_TEXTURE_2D, texID);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);

	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
	gluBuild2DMipmaps(GL_TEXTURE_2D, GL_RGBA, img.Width(), img.Height(), GL_BGRA_EXT, GL_UNSIGNED_BYTE, img.GetDIBBits());

	return texID;
}

void CGLRenderer::Reshape(CDC *pDC, int w, int h)
{
	wglMakeCurrent(pDC->m_hDC, m_hrc);
	
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(50, (double)w / (double)h, 0.1, 2000);
	glMatrixMode(GL_MODELVIEW);

	wglMakeCurrent(NULL, NULL);
}

void CGLRenderer::DestroyScene(CDC *pDC)
{
	wglMakeCurrent(pDC->m_hDC, m_hrc);
	
	glDeleteTextures(6, m_texEnv);
	glDeleteTextures(1, &m_texSpider);

	wglMakeCurrent(NULL,NULL); 
	if(m_hrc) 
	{
		wglDeleteContext(m_hrc);
		m_hrc = NULL;
	}
}

void CGLRenderer::DrawEnvCube(double a)
{
	glEnable(GL_TEXTURE_2D);

	// front
	glBindTexture(GL_TEXTURE_2D, m_texEnv[0]);
	glBegin(GL_QUADS);
	glColor3d(1.0, 1.0, 1.0);

	glTexCoord2d(0, 1);
	glVertex3d(-a / 2, -a / 2, -a / 2);
	glTexCoord2d(0, 0);
	glVertex3d(-a / 2, a / 2, -a / 2);
	glTexCoord2d(1, 0);
	glVertex3d(a / 2, a / 2, -a / 2);
	glTexCoord2d(1, 1);
	glVertex3d(a / 2, -a / 2, -a / 2);

	glEnd();

	// back
	glBindTexture(GL_TEXTURE_2D, m_texEnv[1]);
	glBegin(GL_QUADS);
	glColor3d(1.0, 1.0, 1.0);

	glTexCoord2d(0, 1);
	glVertex3d(a / 2, -a / 2, a / 2);
	glTexCoord2d(0, 0);
	glVertex3d(a / 2, a / 2, a / 2);
	glTexCoord2d(1, 0);
	glVertex3d(-a / 2, a / 2, a / 2);
	glTexCoord2d(1, 1);
	glVertex3d(-a / 2, -a / 2, a / 2);

	glEnd();


	// left
	glBindTexture(GL_TEXTURE_2D, m_texEnv[2]);
	glBegin(GL_QUADS);
	glColor3d(1.0, 1.0, 1.0);

	glTexCoord2d(0, 1);
	glVertex3d(-a / 2, -a / 2, a / 2);
	glTexCoord2d(0, 0);
	glVertex3d(-a / 2, a / 2, a / 2);
	glTexCoord2d(1, 0);
	glVertex3d(-a / 2, a / 2, -a / 2);
	glTexCoord2d(1, 1);
	glVertex3d(-a / 2, -a / 2, -a / 2);

	glEnd();

	// right
	glBindTexture(GL_TEXTURE_2D, m_texEnv[3]);
	glBegin(GL_QUADS);
	glColor3d(1.0, 1.0, 1.0);

	glTexCoord2d(0, 1);
	glVertex3d(a / 2, -a / 2, -a / 2);
	glTexCoord2d(0, 0);
	glVertex3d(a / 2, a / 2, -a / 2);
	glTexCoord2d(1, 0);
	glVertex3d(a / 2, a / 2, a / 2);
	glTexCoord2d(1, 1);
	glVertex3d(a / 2, -a / 2, a / 2);

	glEnd();


	// top
	glBindTexture(GL_TEXTURE_2D, m_texEnv[4]);
	glBegin(GL_QUADS);
	glColor3d(1.0, 1.0, 1.0);

	glTexCoord2d(0, 1);
	glVertex3d(-a / 2, a / 2, -a / 2);
	glTexCoord2d(0, 0);
	glVertex3d(-a / 2, a / 2, a / 2);
	glTexCoord2d(1, 0);
	glVertex3d(a / 2, a / 2, a / 2);
	glTexCoord2d(1, 1);
	glVertex3d(a / 2, a / 2, -a / 2);

	glEnd();

	//bot
	glBindTexture(GL_TEXTURE_2D, m_texEnv[5]);
	glBegin(GL_QUADS);
	glColor3d(1.0, 1.0, 1.0);

	glTexCoord2d(0, 1);
	glVertex3d(-a / 2, -a / 2, a / 2);
	glTexCoord2d(0, 0);
	glVertex3d(-a / 2, -a / 2, -a / 2);
	glTexCoord2d(1, 0);
	glVertex3d(a / 2, -a / 2, -a / 2);
	glTexCoord2d(1, 1);
	glVertex3d(a / 2, -a / 2, a / 2);

	glEnd();



	glDisable(GL_TEXTURE_2D);
}
